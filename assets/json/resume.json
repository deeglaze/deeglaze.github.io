{
  "basics": {
    "name": "Dionna Amalie Glaze",
    "label": "Senior Software Engineer",
    "image": "",
    "email": "drdeeglaze@gmail.com",
    "url": "https://deeglaze.github.io",
    "summary": "An ex-academic tnow working at Google on next generation internet security that enables transparency and privacy at global scale.",
    "location": {
      "address": "777 6th St S",
      "postalCode": "WA 98033",
      "city": "Kirkland",
      "countryCode": "US",
      "region": "Washington"
    },
    "profiles": [
      {
        "network": "Mastodon",
        "username": "@drdeeglaze@tech.lgbt",
        "url": "https://tech.lgbt/@drdeeglaze"
      }
    ]
  },
  "work": [
    {
      "name": "Google Cloud",
      "position": "Senior Software Engineer",
      "url": "https://cloud.google.com/security/products/confidential-computing",
      "startDate": "2017-03-06",
      "endDate": "Now",
      "summary": "I lead the trust and transparency project for Google-vendored binaries in customer virtual machines. This includes a new code signing pipeline, standards body participation, and software supply chain integrity innovations.",
      "highlights": ["Transparency"]
    }
  ],
  "volunteer": [
    {
      "organization": "Internet Engineering Task Force (IETF)",
      "location": "Wilmington, DE",
      "position": "RATS working group member",
      "url": "https://datatracker.ietf.org/wg/rats/about/",
      "startDate": "2023-11-01",
      "endDate": "Now",
      "summary": "I contribute to the design and wording of the CoRIM and CMW formats as well and guideline documentation.",
      "highlights": ["Logical interpretation of profiles", "Issuance operational guidelines"]
    }
  ],
  "education": [
    {
      "institution": "Northeastern University",
      "location": "Boston, MA",
      "url": "https://www.khoury.northeastern.edu/",
      "area": "Programming Languages",
      "studyType": "PhD",
      "startDate": "2009-09-01",
      "endDate": "2015-05-25"
    }
  ],
  "certificates": [
    {
      "name": "CISSP",
      "date": "2024-03-13",
      "issuer": "ISC2",
      "url": "https://isc2.org"
    },
    {
      "name": "CCSP",
      "date": "2024-05-14",
      "issuer": "ISC2",
      "url": "https://isc2.org"
    }
  ],
  "publications": [
    {
      "name": "Optimizing Abstract Abstract Machines",
      "publisher": "ICFP",
      "releaseDate": "2013",
      "url": "https://dl.acm.org/doi/10.1145/2500365.2500604",
      "summary": "This article contributes a step-by-step process for going from a naive analyzer derived under the abstracting abstract machine approach to an efficient program analyzer. The end result of the process is a two to three order-of-magnitude improvement over the systematically derived analyzer, making it competitive with hand-optimized implementations that compute fundamentally less precise results."
    },
    {
      "name": "Abstracting Abstract Control",
      "publisher": "DLS",
      "releaseDate": "2014",
      "url": "https://dl.acm.org/doi/10.1145/2661088.2661098",
      "summary": "  The strength of a dynamic language is also its weakness: run-time flexibility comes at the cost of compile-time predictability. Many of the hallmarks of dynamic languages such as closures, continuations, various forms of reflection, and a lack of static types make many programmers rejoice, while compiler writers, tool developers, and verification engineers lament. The dynamism of these features simply confounds statically reasoning about programs that use them. Consequently, static analyses for dynamic languages are few, far between, and seldom sound."
    },
    {
      "name": "Pushdown flow analysis with abstract garbage collection",
      "publisher": "Journal of Functional Programming",
      "releaseDate": "2014",
      "url": "https://www.cambridge.org/core/journals/journal-of-functional-programming/article/pushdown-flow-analysis-with-abstract-garbage-collection/92567231A16859F51056AB6F6781ACAE",
      "summary": " In the static analysis of functional programs, pushdown flow analysis and abstract garbage collection push the boundaries of what we can learn about programs statically. This work illuminates and poses solutions to theoretical and practical challenges that stand in the way of combining the power of these techniques. Pushdown flow analysis grants unbounded yet computable polyvariance to the analysis of return-flow in higher-order programs. Abstract garbage collection grants unbounded polyvariance to abstract addresses which become unreachable between invocations of the abstract contexts in which they were created. Pushdown analysis solves the problem of precisely analyzing recursion in higher-order languages; abstract garbage collection is essential in solving the “stickiness” problem. Alone, our benchmarks demonstrate that each method can reduce analysis times and boost precision by orders of magnitude."
    }
  ],
  "skills": [
    {
      "name": "Static Analysis",
      "level": "Expert"
    },
    {
      "name": "Cryptographic Protocols",
      "level": "Practitioner"
    }
  ],
  "languages": [
    {
      "language": "English",
      "fluency": "Native speaker",
      "icon": ""
    },
    {
      "language": "Japanese",
      "fluency": "Conversational",
      "icon": ""
    }
  ],
  "interests": [
    {
      "name": "Theorem proving",
      "icon": "fa-solid fa-tag"
    }
  ],
  "references": [
    {
      "name": "Professor David Van Horn",
      "icon": "fa-solid fa-laptop",
      "reference": "Ph.D. advisor"
    },
    {
      "name": "Shanshan Qu",
      "icon": "fa-solid fa-thumbtack",
      "reference": "Software engineering manager"
    }
  ],
  "projects": [
    {
      "name": "gce-tcb-verifier",
      "summary": "Code-signing and verification tool for virtual firmware",
      "highlights": ["Confidential Computing"],
      "startDate": "2023-06-01",
      "endDate": "Now",
      "url": "https://github.com/google/gce-tcb-verifier"
    }
  ]
}
